{"D:\\Projects\\node\\node-typescript-project\\src\\app.ts": {"path":"D:\\Projects\\node\\node-typescript-project\\src\\app.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":42}},"3":{"start":{"line":5,"column":19},"end":{"line":5,"column":41}},"4":{"start":{"line":6,"column":15},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":14},"end":{"line":7,"column":30}},"6":{"start":{"line":8,"column":15},"end":{"line":8,"column":32}},"7":{"start":{"line":9,"column":25},"end":{"line":9,"column":53}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"9":{"start":{"line":13,"column":22},"end":{"line":13,"column":50}},"10":{"start":{"line":15,"column":12},"end":{"line":15,"column":21}},"11":{"start":{"line":17,"column":0},"end":{"line":17,"column":42}},"12":{"start":{"line":20,"column":0},"end":{"line":20,"column":23}},"13":{"start":{"line":21,"column":0},"end":{"line":21,"column":23}},"14":{"start":{"line":22,"column":0},"end":{"line":22,"column":27}},"15":{"start":{"line":23,"column":0},"end":{"line":23,"column":51}},"16":{"start":{"line":24,"column":0},"end":{"line":24,"column":28}},"17":{"start":{"line":34,"column":0},"end":{"line":34,"column":36}},"18":{"start":{"line":35,"column":0},"end":{"line":35,"column":35}},"19":{"start":{"line":39,"column":0},"end":{"line":39,"column":38}},"20":{"start":{"line":40,"column":0},"end":{"line":40,"column":21}}},"fnMap":{},"branchMap":{"0":{"loc":{"start":{"line":17,"column":16},"end":{"line":17,"column":40}},"type":"binary-expr","locations":[{"start":{"line":17,"column":16},"end":{"line":17,"column":32}},{"start":{"line":17,"column":36},"end":{"line":17,"column":40}}],"line":17}},"s":{"0":2,"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":2,"14":2,"15":2,"16":2,"17":2,"18":2,"19":2,"20":2},"f":{},"b":{"0":[2,2]},"inputSourceMap":{"version":3,"file":"app.js","sourceRoot":"","sources":["app.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AACnC,2CAA2C,CAAE,sBAAsB;AAEnE,0CAA0C;AAC1C,iCAAiC;AACjC,+BAA+B;AAC/B,iCAAiC;AAGjC,sDAAsD;AAItD,yFAAyF;AACzF,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;AAExC,+BAA+B;AAE/B,mDAAmD;AAInD,wBAAwB;AACxB,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AAGtB,wBAAwB;AACxB,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;AAC1C,sDAAsD;AACtD,iCAAiC;AACjC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;AACvB,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACvB,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACnD,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC;AAC5B;;;;;;;;MAQM;AACN,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;AACpC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AAEnC;;GAEG;AACH,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;AAGtC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","sourcesContent":["import * as express from \"express\";\r\nimport * as compression from \"compression\";  // compresses requests\r\nimport * as session from \"express-session\";\r\nimport * as bodyParser from \"body-parser\";\r\nimport * as logger from \"morgan\";\r\nimport * as lusca from \"lusca\";\r\nimport * as dotenv from \"dotenv\";\r\nimport * as mongo from \"connect-mongo\";\r\nimport * as path from \"path\";\r\nimport * as expressValidator from \"express-validator\";\r\nimport * as bluebird from \"bluebird\";\r\n\r\n\r\n// Load environment variables from .env file, where API keys and passwords are configured\r\ndotenv.config({ path: \".env.example\" });\r\n\r\n// Controllers (route handlers)\r\n\r\nimport * as apiController from \"./controllers/api\";\r\n\r\n\r\n\r\n// Create Express server\r\nconst app = express();\r\n\r\n\r\n// Express configuration\r\napp.set(\"port\", process.env.PORT || 3000);\r\n// app.set(\"views\", path.join(__dirname, \"../views\"));\r\n// app.set(\"view engine\", \"pug\");\r\napp.use(compression());\r\napp.use(logger(\"dev\"));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(expressValidator());\r\n/*app.use(session({\r\n  resave: true,\r\n  saveUninitialized: true,\r\n  secret: process.env.SESSION_SECRET,\r\n  store: new MongoStore({\r\n    url: mongoUrl,\r\n    autoReconnect: true\r\n  })\r\n}));*/\r\napp.use(lusca.xframe(\"SAMEORIGIN\"));\r\napp.use(lusca.xssProtection(true));\r\n\r\n/**\r\n * API examples routes.\r\n */\r\napp.get(\"/api\", apiController.getApi);\r\n\r\n\r\nmodule.exports = app;"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"fd3dc91f50896b7936404272f8d678bc82d5f3a8"}
,"D:\\Projects\\node\\node-typescript-project\\src\\controllers\\api.ts": {"path":"D:\\Projects\\node\\node-typescript-project\\src\\controllers\\api.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":9,"column":2}},"2":{"start":{"line":8,"column":4},"end":{"line":8,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":18}},"loc":{"start":{"line":7,"column":31},"end":{"line":9,"column":1}},"line":7}},"branchMap":{},"s":{"0":2,"1":2,"2":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"api.js","sourceRoot":"","sources":["api.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAQb;;;GAGG;AACQ,QAAA,MAAM,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAClD,GAAG,CAAC,IAAI,CAAE,EAAC,QAAQ,EAAG,IAAI,EAAC,CAAC,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["\"use strict\";\r\n\r\nimport * as async from \"async\";\r\nimport * as request from \"request\";\r\n// import * as graph from \"fbgraph\";\r\nimport { Response, Request, NextFunction } from \"express\";\r\n\r\n\r\n/**\r\n * GET /api\r\n * List of API examples.\r\n */\r\nexport let getApi = (req: Request, res: Response) => {\r\n  res.send( {'result' : 'ok'});\r\n};\r\n\r\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"f64676b47a30832c165d936e9e5002e8dcb56e49"}
}
